from sklearn import metrics
from plotconfusion_matrix import plot_cms

network= MNISTNet()

#Loading the saved Instance of the network
network.load_state_dict(torch.load('mnist_net.model', map_location=torch.device('cpu')))

dataset3 = MNIST('datasettest',  train = False, download=True, transform=transforms.ToTensor())
loader3 = DataLoader(dataset3, batch_size=4000, num_workers=4)


#Function To Get Network Prediction With no gradient calculation to save memory
@torch.no_grad()
def getprediction (network, dloader):
    prdten = torch.tensor([], dtype = torch.float)
    label =torch.tensor([], dtype= torch.float)
    
    for batch in dloader:
        fimages, flabel = batch
        
        pred = network(fimages)
        prdten = torch.cat(
                (prdten,pred), dim=0 )
        label = torch.cat(
                (label, flabel.type(torch.float)), dim=0)
    return prdten,label
    
    
pred, label = getprediction(network, loader3)


kpred = (pred.argmax(dim=1)).type(torch.float)
print(metrics.accuracy_score(label.numpy(), kpred.numpy()))


#Stacking Prediction And Labels To Create Two Column Tensor 
predstack= torch.stack ((kpred, label), dim=1)
print("Shapes of the Tensors are ", kpred.shape, pred.shape, predstack.shape )


#Creating Confusion Matrix
confmat = torch.zeros(10,10, dtype=torch.int64)
for x in predstack:
    p, l = x.type(torch.int)
    confmat[p,l] +=1
    
print (confmat)

#Confusion Matrix Using Sklearn
#cm_sk= metrics.confusion_matrix(label.numpy(), kpred.numpy())

#Plotting The Confusion Matrix
plot_cms(confmat, plt.cm.Blues)
