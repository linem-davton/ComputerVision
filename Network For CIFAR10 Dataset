import torch
import torch.nn as nn
from torch.utils.data import DataLoader
from torchvision import transforms
import numpy as np
import torch.nn.functional as F
from torchvision.datasets import CIFAR10
from modules import CIFARNet

class CIFARNet(nn.Module):
    
    def __init__(self):
        super().__init__()
        self.con1 = nn.Sequential(nn.Conv2d(3, 6, 3, padding=1), nn.ReLU())
        self.pool = nn.MaxPool2d(2,2, padding=1)
        self.con2 = nn.Sequential(nn.Conv2d(6, 16, 3, padding=1), nn.ReLU())
        self.con3 = nn.Sequential(nn.Conv2d(16, 32, 3, padding=1), nn.ReLU())
        self.con4 = nn.Sequential(nn.Conv2d(32, 64, 3, padding=1), nn.ReLU())
        
        self.ll1 = nn.Sequential(nn.Linear(64*3*3, 400), nn.ReLU())
        self.ll2 = nn.Sequential(nn.Linear(400, 280), nn.ReLU())
        
        self.ll3 = nn.Sequential(nn.Linear(280, 160), nn.ReLU())
        self.ll4 = nn.Sequential(nn.Linear(160, 80), nn.ReLU())
       

        
        self.last_layer = nn.Linear(80, 10)
    
    def forward(self, x):
        x = self.pool(self.con1(x))
        x = self.pool(self.con2(x))
        x = self.pool(self.con3(x))
        x = self.pool(self.con4(x))
      
        x = x.reshape(-1, 3*3*64)
        
        x= self.ll1(x)
        x= self.ll2(x)
        x= self.ll3(x)
        x= self.ll4(x)
        
        x = self.last_layer(x)
        return x
 
dataset = CIFAR10('data', download=True, transform=transforms.ToTensor())
loader = DataLoader(dataset, batch_size=16, num_workers=4)
net2 = CIFARNet()
if torch.cuda.is_available():
    net2.cuda()

total_loss2 = nn.CrossEntropyLoss()
param2 = net2.parameters()
optimizer2 = optim.Adam(params=param2,lr=0.001)

n_epochs2=6
n_iterations2=0

for e in range(n_epochs2):
    for i,(images2,labels2) in enumerate(loader):
        images2 = Variable(images2)
        labels2 = Variable(labels2)
        if torch.cuda.is_available():
            images2 = Variable(images2).cuda()
            labels2 = Variable(labels2).cuda()
        
        output = net2(images2)
        
        net2.zero_grad()
        
        loss = total_loss2(output,labels2)
        loss.backward()
        
        optimizer2.step()
        n_iterations2 +=1
        
torch.save(net2.state_dict(), 'cifar_net.model')
